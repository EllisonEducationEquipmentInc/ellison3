= form_for([:admin, @tag], :html => {:multipart => true}) do |f|
  = f.error_messages

  %hr
  %h3.contentwrap_XXXL.last System Visibility
  .contentwrap_large
    .field
      = f.label :active, "This tag is", :class => "autosize"
      active
      = f.radio_button(:active, true)
      disabled
      = f.radio_button(:active, false, :disabled => @tag.send("end_date_#{current_system}").blank? || @tag.send("end_date_#{current_system}") < Time.zone.now ? false: true)
      %p#disable_formhelp{ :style => "display: #{ @tag.send("end_date_#{current_system}").present? && @tag.send("end_date_#{current_system}") > Time.zone.now ? 'block' : 'none' }"}== This tag <em>cannot</em> be disabled because its <strong>End Date</strong> is set in the future.
    .field
      = required_label f, :systems_enabled, { :label => "Enabled for", :label_size => "auto" }
      = system_enabled('tag')
  .contentwrap_large.last
    .field
      = f.label "start_date_#{current_system}", "<span class='required'><span class='icon_datefield'>Start Date #{current_system.upcase}</span></span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 130px'
      = f.text_field "start_date_#{current_system}", :class => 'datetimepicker'
    .field
      = f.label "end_date_#{current_system}", "<span class='required'><span class='icon_datefield'>End Date #{current_system.upcase}</span></span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 130px'
      = f.text_field "end_date_#{current_system}", :class => 'datetimepicker'

  %hr
  %h3.contentwrap_XXXL Basic Information
  - unless f.object.new_record?
    %p.contentwrap_XXXL
      %strong Permalink: 
      = link_to "http://#{request.host_with_port}<strong>#{catalog_path(:anchor => "facets=#{@tag.facet_param}")}</strong>".html_safe, "http://#{request.host_with_port}#{catalog_path(:anchor => "facets=#{@tag.facet_param}")}"
  .contentwrap_large
    .field.left
      = required_label f,  :name, { :label => "Tag Name" }
      = f.text_field :name
    .field.left 
      = f.label :tag_type, "Tag Type"
      = f.select :tag_type, Tag.all_types.map {|t| [t.humanize, t]}, {}, :onchange => "toggle_tag_type_fields()"  
  .contentwrap_large.last
    %p
    .field
      .left{ :style => "margin-right: 10px"}= image_tag(@tag.image_url(:small)) if @tag.image?
      .left
        %span.icon_imagefield= f.label :image, "List Page Image"
        = f.file_field :image
        = f.hidden_field :image_cache
        - unless f.object.new_record?
          %br
          %br
          = f.check_box :remove_image, :style => "margin-left: 0"
          = f.label :remove_image, :class => "autosize"
    .clear
    .field
      .left{ :style => "margin-right: 10px"}= image_tag(@tag.send("image_#{current_system}_url", :small)) if @tag.send("image_#{current_system}?")
      .left
        %span.icon_imagefield= f.label :image, "#{current_system.upcase} List Page Image (has higher precedent if defined)"
        = f.file_field :"image_#{current_system}"
        = f.hidden_field :"image_#{current_system}_cache"
        - unless f.object.new_record?
          %br
          %br
          = f.check_box :"remove_image_#{current_system}", :style => "margin-left: 0"
          = f.label :"remove_image_#{current_system}", :class => "autosize"
  
  #new_campaign{:style => "display:#{@tag.campaign? ? 'block' : 'none'}"}
    %hr
    %h3.contentwrap_XXXL.last Special/Campaign Details
    - unless f.object.new_record?
      .contentwrap_medium
        .field 
          = f.label :embed_campaign, "Apply discounts to associated products?", :class => "autosize"
          %br
          = f.radio_button(:embed_campaign, true, :style => "margin: 0 3px 0 10px")
          Yes, batch apply discount to associated products.
          %br
          = f.radio_button(:embed_campaign, false, :style => "margin: 0 3px 0 10px")
          No. Leave current product pricing as-is.

    = f.fields_for :campaign, @tag.campaign do |campaign_fields|
      .contentwrap_medium
        .field
          = campaign_fields.label :individual, "How should discounts be configured & applied?", :class => "autosize"
          %br
          = campaign_fields.radio_button(:individual, false, :style => "margin: 0 3px 0 10px", :onclick => "update_campaign();")
          == as <em>one</em> discount for <strong>a group</strong> of products
          %br
          = campaign_fields.radio_button(:individual, true, :style => "margin: 0 3px 0 10px", :onclick => "update_campaign();")          
          == as a <em>unique</em> discount for <strong>individual</strong> products
      %div{:class => "contentwrap_#{ f.object.new_record? ? 'XL' : 'medium' } last"}
        .border-left
          %p.formhelp== If <strong>all products</strong> in this Specials tag share the same discount percent, select "one discount for a group of products".
          %p.formhelp== If each product is discounted <em>differently</em>, select "a unique discount for individual products".
          %p.formhelp== To create a Specials tag <strong>with <u>NO</u> discount percentage</strong>, select "a unique discount for individual products".
      .contentwrap_XXXL.last
        .field.individual
          %ul#individual
            %li.ui-menu-item
              = f.label :item_num, "Item Number", :style => "width: 76px"
              = f.label :discount_type, "Discount Type", :style => "width: 85px"
              = f.label :discount, "Discount Value", :style => "width: 90px"
              = f.label :msrp, "MSRP", :style => "width: 90px"
              = f.label :price, "Discount Price", :style => "width: 90px"
            = campaign_fields.fields_for :individual_discounts do |individual_discount_fields|
              = render :partial => 'admin/individual_discounts/individual_discount', :locals => {:f => individual_discount_fields}
            = link_to_add_fields "Add Product", campaign_fields, :individual_discounts
            :javascript
              function add_individual_discount(){
                #{add_fields_function('individual', campaign_fields, :individual_discounts)}
              };
        .field.discount
          = campaign_fields.label :discount_type, :style => "width: 120px"
          = campaign_fields.select :discount_type, Campaign::DISCOUNT_TYPES
        .field.discount
          = required_label campaign_fields, :discount, { :label => "Discount Amount", :label_size => "120px"}
          = campaign_fields.text_field :discount, :size => 6

  - unless @tag.new_record?
    .contentwrap_XXXL
      .field
        = f.label :product_item_nums, "Product Item Numbers (please do not add more than 150 at a time)".html_safe, :class => "autosize"
        %br
        = f.text_area :product_item_nums, :cols => 57, :rows => 5
        %p.formhelp Separate item numbers with commas to batch apply these settings for several products.

    %hr
    %h3.contentwrap_XXXL.last Related Products
    #tag_products_section= render :partial => 'tag_products'
    :javascript
      $(document).ready(function(){
        $('.product_pagination.ajax a').live('click', function() {$("#tag_products_section").css({ opacity: 0.3 });this.innerHTML='#{escape_javascript spinner}';$('#tag_products_section').load(this.href);return false;})
      });
    = text_field_tag "tag_products_helper", nil, :style => "margin-bottom: 10px", :placeholder => "get product by name or item num"
    - if (@tag.tag_type == "special" || @tag.tag_type == "exclusive") && @tag.send("end_date_#{current_system}").present? && (!(@tag.active && @tag.send("end_date_#{current_system}") > Time.zone.now))
      %p
        = link_to "Remove All Products", {:action => :remove_all_products, :id => @tag.id}, :remote => true, :method => :delete, :confirm => "Are you sure you want to remove all products from this tag?", :class => "link_remove"
      %p
        %span.formhelp_important
          == <strong>Important Note!</strong>
          %br
          == Please verify that <strong><em>all</em></strong> products associated with this tag have been indexed <strong>BEFORE</strong> clicking 'Remove All Products'.
          %br
          Review this
          = link_to "tag's permalink", "http://#{request.host_with_port}#{catalog_path(:anchor => "facets=#{@tag.facet_param}")}", :style => "text-decoration: underline"
          == to verify that indexing has completed - <strong><span style="text-decoration: underline">NO</span></strong> products should be displayed.
        %br
        %span.formhelp
          %br
          == Removing product(s) here will <strong>ONLY</strong> remove them from <em>this</em> Specials tag - <strong>IT WILL NOT REMOVE THE SALE PRICE OF THE PRODUCT(S) THEMSELVES.</strong>
          %br
          To remove or delete the sale prices from products, do so from each product's respective detail page.
    .field
      %strong Get Products by Tag type
      = select_tag :get_products_by_tag_type, options_for_select([["--- select tag type ---", nil]] + Tag.all_types)
      %span#get_products_by_tag
      #products_by_tag_helper
      :javascript
        var product_ids = #{@tag.product_ids.map &:to_s}
        $('#get_products_by_tag_type').change(function(){
          $('#products_by_tag_helper').html('');
          if (this.value == '') {
            $('#get_products_by_tag').html('');
          } else {
            $.getJSON('/tags_by_type?type='+this.value, function(data) {
              var items = [];

              $.each(data, function(key, val) {
                items.push('<option value="' + val.id + '">' + val.label + '</option>');
              });
              $('#get_products_by_tag').html(function() {
                return $('<select>', {
                  'name': 'get_products_by_tag_id',
                  id: 'get_products_by_tag_id',
                  html: '<option value="">--- select tag ---</option>' + items.join('')
                })
              })
            });
          }
        });
        $('#get_products_by_tag_id').live('change', function(){
          if (this.value == '') {
            $('#products_by_tag_helper').html('');
          } else {
            $.getJSON('/get_products_by_tag?id='+this.value, function(data) {
              var items = [];

              $.each(data, function(key, val) {
                items.push('<li class="ui-menu-item '+(product_ids.indexOf(val.id) >= 0 ? 'already_added' : 'product_by_tag_list_li')+'" id="product_helper_' + val.id + '">' + val.label + '</li>');
              });
              $('#products_by_tag_helper').html(function() {
                return $('<ul/>', {
                  'class': 'product_by_tag_list',
                  html: items.join('')
                })
              })
            });
          }
        })
        $('.product_by_tag_list_li').live("mouseover mouseout", function(event){
          if ( event.type == "mouseover" ) {
            $(this).addClass("product_by_tag_list_over");
          } else {
            $(this).removeClass("product_by_tag_list_over");
          }
        })
        $('.product_by_tag_list_li').live("click", function(){
          product_ids.push(this.id.replace('product_helper_', ''));
          $(this).removeClass("product_by_tag_list_li product_by_tag_list_over");
          $(this).addClass("already_added");
          $.ajax({url:'/admin/tags/add_product?product_id='+this.id.replace('product_helper_', '')+'&id=#{@tag.id}', success: function(html) {$('#tag_products').append(html);$('#tag_products').find('.spinner').remove();}, beforeSend: function(){$('#tag_products').append('#{escape_javascript loader_bar}')}});
        })
    %hr
    %h3.contentwrap_XXXL.last Related Ideas
    #tag_ideas_section= render :partial => 'tag_ideas'
    = text_field_tag "tag_ideas_helper", nil, :style => "margin-bottom: 10px", :placeholder => "get idea by name or idea num"
    .field
      %strong Get Ideas by Tag type
      = select_tag :get_ideas_by_tag_type, options_for_select([["--- select tag type ---", nil]] + Tag.all_types)
      %span#get_ideas_by_tag
      #ideas_by_tag_helper
    :javascript
      var idea_ids = #{@tag.idea_ids.map &:to_s}
      $('#get_ideas_by_tag_type').change(function(){
        $('#ideas_by_tag_helper').html('');
        if (this.value == '') {
          $('#get_ideas_by_tag').html('');
        } else {
          $.getJSON('/tags_by_type?type='+this.value, function(data) {
            var items = [];

            $.each(data, function(key, val) {
              items.push('<option value="' + val.id + '">' + val.label + '</option>');
            });
            $('#get_ideas_by_tag').html(function() {
              return $('<select>', {
                'name': 'get_ideas_by_tag_id',
                id: 'get_ideas_by_tag_id',
                html: '<option value="">--- select tag ---</option>' + items.join('')
              })
            })
          });
        }
      });
      $('#get_ideas_by_tag_id').live('change', function(){
        if (this.value == '') {
          $('#ideas_by_tag_helper').html('');
        } else {
          $.getJSON('/get_ideas_by_tag?id='+this.value, function(data) {
            var items = [];

            $.each(data, function(key, val) {
              items.push('<li class="ui-menu-item '+(idea_ids.indexOf(val.id) >= 0 ? 'already_added' : 'idea_by_tag_list_li')+'" id="idea_helper_' + val.id + '">' + val.label + '</li>');
            });
            $('#ideas_by_tag_helper').html(function() {
              return $('<ul/>', {
                'class': 'idea_by_tag_list',
                html: items.join('')
              })
            })
          });
        }
      })
      $('.idea_by_tag_list_li').live("mouseover mouseout", function(event){
        if ( event.type == "mouseover" ) {
          $(this).addClass("idea_by_tag_list_over");
        } else {
          $(this).removeClass("idea_by_tag_list_over");
        }
      })
      $('.idea_by_tag_list_li').live("click", function(){
        idea_ids.push(this.id.replace('idea_helper_', ''));
        $(this).removeClass("idea_by_tag_list_li idea_by_tag_list_over");
        $(this).addClass("already_added");
        $.ajax({url:'/admin/tags/add_idea?idea_id='+this.id.replace('idea_helper_', '')+'&id=#{@tag.id}', success: function(html) {$('#tag_ideas').append(html);$('#tag_ideas').find('.spinner').remove();}, beforeSend: function(){$('#tag_ideas').append('#{escape_javascript loader_bar}')}});
      });

      $(document).ready(function(){
        $('.idea_pagination.ajax a').live('click', function() {$("#tag_ideas_section").css({ opacity: 0.3 });this.innerHTML='#{escape_javascript spinner}';$('#tag_ideas_section').load(this.href);return false;})
      });
  
  %hr
  .contentwrap_large
    .field
      = f.label "calendar_start_date_#{current_system}", "<span class='icon_datefield'>Calendar Start Date #{current_system.upcase}</span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 175px'
      = f.text_field "calendar_start_date_#{current_system}", :class => 'datetimepicker'
    .field
      = f.label "calendar_end_date_#{current_system}", "<span class='icon_datefield'>Calendar End Date #{current_system.upcase}</span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 175px'
      = f.text_field "calendar_end_date_#{current_system}", :class => 'datetimepicker'
    -# disabling 'All Day' checkbox
      .field
        = f.label :all_day
        = f.check_box :all_day
    .field
      .left{:style => "margin: 4px 10px 0 0"}
        = f.label :color, :class => "autosize"
        = f.select :color, %w(#336699 #339933 #ff9900 #ff0000 #ff00cc #3399cc #33cc33 #993333)
      .left= image_tag("/images/ui-objects/tag_color_selector.png", :alt => "color legend", :title => "color legend")
  
  .contentwrap_large.last
    .field
      = f.label :description, "Description <span class='formhelp'><em>for internal admin use only</em></span>".html_safe, :class => "autosize"
      %br
      = f.text_area :description, :cols => 57, :rows => 5

  %hr
  #visual_assets.contentwrap_XXXL.last
    - unless @tag.visual_assets.blank?
      %h3.left Visual Assets
      %p.right.link_collapse.minilink= link_to "collapse all", "#", :onclick => "$('.visual_asset, .child_visual_asset').css({height:'25px',overflow:'hidden'}); return false;"
    .clear
    = f.fields_for :visual_assets, @tag.visual_assets.ordered do |visual_asset_fields|
      = render 'admin/visual_assets/visual_asset', :f => visual_asset_fields
    = link_to_add_fields "Add Visual Asset", f, :visual_assets
  %br
  .clear
  .actions
    = f.submit :class => 'wymupdate jqui_save', :disable_with => "please wait..."
:javascript
  function check_date(date_string) {
    var now = Date.today();
    var end_date = Date.parse(date_string);
    if (end_date > now) {
      $('#tag_active_false').attr('disabled',true);
      $('#disable_formhelp').show();
    } else {
      $('#tag_active_false').attr('disabled',false);
      $('#disable_formhelp').hide();
    }
  }
  function update_campaign(){
    if ($('#tag_campaign_individual_true').attr('checked')) { $('.discount').hide();$('.individual').show(); } else { $('.discount').show();$('.individual').hide();}
  };
  $('#visual_assets').sortable({tolerance: 'pointer', start: function(event, ui) {$('.visual_asset').css({height:"22px",overflow:"hidden"})}, stop: function(event, ui) {$('.visual_asset').css({height:"auto"})}, update: function(event, ui) {
    $.ajax({url:"/admin/tags/reorder_visual_assets?id=#{@tag.id}&"+$("#visual_assets").sortable('serialize')});
  }})
  $("#tag_products_helper").autocomplete({
  	source: function(request, response) {
  	  $.ajax({
      	url: "/products_autocomplete",
      	dataType: 'text json',
      	data: {term: request.term},
      	success: function( data ) {response(data)}
      });
  	},
  	search: function() {
  		if (this.value.length < 2) {
  			return false;
  		}
  	},
  	focus: function( event, ui ) {
    				$( "#tag_products_helper" ).val( ui.item.label );
    				return false;
    			},
  	select: function(event, ui) {
  	  this.value = '';
  		$.ajax({
  		  url:'/admin/tags/add_product?product_id='+ui.item.id+'&id=#{@tag.id}',
  		  success: function(html) {
  		    $('#tag_products').append(html);
  		    $('#tag_products').find('.spinner').remove();
  		  },
  		  beforeSend: function(){
  		    $('#tag_products').append('#{escape_javascript loader_bar}');
  		  }  		  
  		});
  		return false;
  	}});
  $("#tag_ideas_helper").autocomplete({
  	source: function(request, response) {
  	  $.ajax({
      	url: "/ideas_autocomplete",
      	dataType: 'text json',
      	data: {term: request.term},
      	success: function( data ) {response(data)}
      });
  	},
  	search: function() {
  		if (this.value.length < 2) {
  			return false;
  		}
  	},
  	focus: function( event, ui ) {
    				$( "#tag_ideas_helper" ).val( ui.item.label );
    				return false;
    			},
  	select: function(event, ui) {
  	  this.value = '';
  	  $.ajax({
  	    url:'/admin/tags/add_idea?idea_id='+ui.item.id+'&id=#{@tag.id}',
  	    success: function(html){
  	      $('#tag_ideas').append(html);
  	      $('#tag_ideas').find('.spinner').remove();
  	    },
  		  beforeSend: function(){
  		    $('#tag_ideas').append('#{escape_javascript loader_bar}');
  		  }
  	  });
  		return false;
  	}});
  
  update_campaign();
  toggle_tag_type_fields();
  
  function toggle_tag_type_fields(){
    if ($('#tag_tag_type').val() == 'special') {$('#new_campaign').show();$('#tag_embed_campaign_true').attr('checked', true)} else {$('#new_campaign').hide();}
  }