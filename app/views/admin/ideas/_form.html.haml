= form_for([:admin, @idea], :html => {:multipart => true}) do |f|
  = f.error_messages

  %hr
  %h3.contentwrap_XXXL.last System Visibility
  .contentwrap_large
    .field
      = f.label :active, "This idea is", :class => "autosize"
      active
      = f.radio_button(:active, true)
      disabled
      = f.radio_button(:active, false)
    .field
      = required_label f, :systems_enabled, { :label => "Enabled for", :label_size => "auto" }
      = system_enabled('idea')
  .contentwrap_large.last
    .field
      = f.label "start_date_#{current_system}", "<span class='icon_datefield'>Start Date #{current_system.upcase}</span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 120px'
      = f.text_field "start_date_#{current_system}", :class => 'datetimepicker'
    .field
      = f.label "end_date_#{current_system}", "<span class='icon_datefield'>End Date #{current_system.upcase}</span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 120px'
      = f.text_field "end_date_#{current_system}", :class => 'datetimepicker'

  %hr
  %h3.contentwrap_XXXL.last Basic Information
  .contentwrap_large
    .field
      = required_label f, :name, { :label => "Idea Name" }
      = f.text_field :name, :size => 46, :style => "font-weight: bold;"
    .field
      = required_label f, :idea_num, { :label => "Idea Number"}
      = f.text_field :idea_num, :size => "8"
    .field
      = f.label :item_group, "Brand"
      = f.select :item_group, Product::ITEM_GROUPS
  .contentwrap_large.last
    .field
      = f.label :use_tabs, "Page Layout", :class => "w121"
      %span.icon_tabbed-view
        tabbed view
      = f.radio_button(:use_tabs, true)
      %span.icon_full-view
        full view
      = f.radio_button(:use_tabs, false)
    .field
      = f.label :video, "YouTube Video ID", :class => "link_youtube"
      = f.text_field :video
      %br
      %p.formhelp{ :style => "margin-left: 132px"} sample YouTube ID: ndspni2cVqg
  
  %hr
  .contentwrap_XXXL.last
    .field
      = f.label :description, :class => 'overrideable ui-corner-all'
      %br
      = f.text_area :description, :class => 'wymeditor'
    - unless is_sizzix?
      .field
        = f.label :objective
        %br
        = f.text_area :objective, :class => 'wymeditor'
      
  %hr
  .contentwrap_large
    %h3.contentwrap_XXXL.last Default Idea Image
    .field
    = image_tag(@idea.image_url(:small)) if @idea.image? 
    = f.file_field :image
    = f.hidden_field :image_cache
    %br
    = f.label :remove_image
    = f.check_box :remove_image
  .contentwrap_large.last
    %h3 Catalog Messages
    .field
      = f.label "distribution_life_cycle_#{current_system}", "Life Cycle Message #{current_system.upcase}", :class => 'overrideable ui-corner-all autosize'
      %br
      = f.text_field "distribution_life_cycle_#{current_system}"
    .field
      = f.label "distribution_life_cycle_ends_#{current_system}", "<span class='icon_datefield'>Life Cycle Message End Date #{current_system.upcase}</span>".html_safe, :class => 'overrideable ui-corner-all autosize'
      %br
      = f.text_field "distribution_life_cycle_ends_#{current_system}", :class => 'datetimepicker'

  %hr
  %h3.contentwrap_XXXL.last Tags, Ideas & Keywords
  .contentwrap_large
    %strong Tags
    - if @idea.new_record?
      %p
        %em Please save this idea first before assigning tags.
    - else
      #idea_tags_section= render :partial => 'idea_tags'
      .field
        = label_tag :idea_tags_helper #, "<strong>Add A#{ @idea.tags.count >= 1 ? 'nother' : nil } Tag</strong".html_safe
        = text_field_tag "idea_tags_helper", nil, :placeholder => "get tag by name"
      :javascript
        $(document).ready(function(){
          $('.tag_pagination.ajax a').live('click', function() {$("#idea_tags_section").css({ opacity: 0.3 });this.innerHTML='#{escape_javascript spinner}';$('#idea_tags_section').load(this.href);return false;})
        });
        $("#idea_tags_helper").autocomplete({
        	source: function(request, response) {
          	$.ajax({
            	url: "/tags_autocomplete",
            	dataType: 'text json',
            	data: {term: request.term},
            	success: function( data ) {response(data)}
            });
        	},
        	search: function() {
        		if (this.value.length < 2) {
        			return false;
        		}
        	},
        	focus: function( event, ui ) {
          				$( "#idea_tags_helper" ).val( ui.item.label );
          				return false;
          			},
        	select: function(event, ui) {
        	  this.value = '';
        	  $.ajax({url:'/admin/ideas/add_tag?tag_id='+ui.item.id+'&id=#{@idea.id}', success: function(html) {$('#idea_tags').append(html);$('#idea_tags').find('.spinner').remove();}, beforeSend: function(){$('#idea_tags').append('#{escape_javascript loader_bar}')}});
        		return false;
        	}});
      .field
        %strong Get Tags by type
        = select_tag :get_tags_by_type, options_for_select([["--- select tag type ---", nil]] + Tag.all_types)
        #tag_by_type_helper
        :javascript
          var tag_ids = #{@idea.tag_ids.map &:to_s}
          $('#get_tags_by_type').change(function(){
            if (this.value == '') {
              $('#tag_by_type_helper').html('');
            } else {
              $.getJSON('/tags_by_type?type='+this.value, function(data) {
                var items = [];

                $.each(data, function(key, val) {
                  items.push('<li class="ui-menu-item '+(tag_ids.indexOf(val.id) >= 0 ? 'already_added' : 'tag_by_type_list_li')+'" id="tag_helper_' + val.id + '">' + val.label + '</li>');
                });
                $('#tag_by_type_helper').html(function() {
                  return $('<ul/>', {
                    'class': 'tag_by_type_list',
                    html: items.join('')
                  })
                })
              });
            }
          })
          $('.tag_by_type_list_li').live("mouseover mouseout", function(event){
            if ( event.type == "mouseover" ) {
              $(this).addClass("tag_by_type_list_over");
            } else {
              $(this).removeClass("tag_by_type_list_over");
            }
          })
          $('.tag_by_type_list_li').live("click", function(){
            tag_ids.push(this.id.replace('tag_helper_', ''));
            $(this).removeClass("tag_by_type_list_li tag_by_type_list_over");
            $(this).addClass("already_added");
            $.ajax({url:'/admin/ideas/add_tag?tag_id='+this.id.replace('tag_helper_', '')+'&id=#{@idea.id}', success: function(html) {$('#idea_tags').append(html);$('#idea_tags').find('.spinner').remove();}, beforeSend: function(){$('#idea_tags').append('#{escape_javascript loader_bar}')}});
          })
  .contentwrap_large.last
    .field
      = f.label :related_idea_tag, "Related Idea Tag ID", :class => "autosize"
      %br
      = f.text_field :related_idea_tag
      %br
      %span#related_idea_tag_name= @idea.related_idea_tag_name
      %span.formhelp
        If this field is left blank, default tag logic
        %br
        will dictate which related ideas are displayed.
      :javascript
        $('#idea_related_idea_tag').autocomplete({
        	source: function(request, response) {
        	  $.ajax({
            	url: "/tags_autocomplete",
            	dataType: 'text json',
            	data: {term: request.term},
            	success: function( data ) {response(data)}
            });
        	},
        	search: function() {
        		if (this.value.length < 2) {
        			return false;
        		}
        	},
        	focus: function( event, ui ) {
          				return false;
          			},
        	select: function(event, ui) {
        	  $("#related_idea_tag_name").html( ui.item.label + '<br />' );
            $(this).val( ui.item.id );
            return false;
          }});
  %hr
  .contentwrap_large
    %strong
      Products Used
      %span.formhelp.tip_related-products (Products used to create this idea)
    - if @idea.new_record?
      %p
        %em Please save this idea first before assigning products.
    - else
      #idea_products_section= render :partial => 'idea_products'
      = label_tag :idea_products_helper, "<strong>Add A#{ @idea.products.count >= 1 ? 'nother' : nil } Product</strong>".html_safe
      = text_field_tag "idea_products_helper", nil, :placeholder => "get product by name or item num"
      :javascript
        $(document).ready(function(){
          $('.product_pagination.ajax a').live('click', function() {$("#idea_products_section").css({ opacity: 0.3 });this.innerHTML='#{escape_javascript spinner}';$('#idea_products_section').load(this.href);return false;})
        });
        $("#idea_products_helper").autocomplete({
        	source: function(request, response) {
        	  $.ajax({
            	url: "/products_autocomplete",
            	dataType: 'text json',
            	data: {term: request.term},
            	success: function( data ) {response(data)}
            });
        	},
        	search: function() {
        		if (this.value.length < 2) {
        			return false;
        		}
        	},
        	focus: function( event, ui ) {
          				$( "#idea_products_helper" ).val( ui.item.label );
          				return false;
          			},
        	select: function(event, ui) {
        	  this.value = '';
        	  $.ajax({url:'/admin/ideas/add_product?product_id='+ui.item.id+'&id=#{@idea.id}', success: function(html) {$('#idea_products').append(html);$('#idea_products').find('.spinner').remove();}, beforeSend: function(){$('#idea_products').append('#{escape_javascript loader_bar}')}});
        		return false;
        	}});
      .field
        %strong Get Products by Tag type
        = select_tag :get_products_by_tag_type, options_for_select([["--- select tag type ---", nil]] + Tag.all_types)
        %span#get_products_by_tag
        #products_by_tag_helper
        :javascript
          var product_ids = #{@idea.product_ids.map &:to_s}
          $('#get_products_by_tag_type').change(function(){
            $('#products_by_tag_helper').html('');
            if (this.value == '') {
              $('#get_products_by_tag').html('');
            } else {
              $.getJSON('/tags_by_type?type='+this.value, function(data) {
                var items = [];

                $.each(data, function(key, val) {
                  items.push('<option value="' + val.id + '">' + val.label + '</option>');
                });
                $('#get_products_by_tag').html(function() {
                  return $('<select>', {
                    'name': 'get_products_by_tag_id',
                    id: 'get_products_by_tag_id',
                    html: '<option value="">--- select tag ---</option>' + items.join('')
                  })
                })
              });
            }
          });
          $('#get_products_by_tag_id').live('change', function(){
            if (this.value == '') {
              $('#products_by_tag_helper').html('');
            } else {
              $.getJSON('/get_products_by_tag?id='+this.value, function(data) {
                var items = [];

                $.each(data, function(key, val) {
                  items.push('<li class="ui-menu-item '+(product_ids.indexOf(val.id) >= 0 ? 'already_added' : 'product_by_tag_list_li')+'" id="product_helper_' + val.id + '">' + val.label + '</li>');
                });
                $('#products_by_tag_helper').html(function() {
                  return $('<ul/>', {
                    'class': 'product_by_tag_list',
                    html: items.join('')
                  })
                })
              });
            }
          })
          $('.product_by_tag_list_li').live("mouseover mouseout", function(event){
            if ( event.type == "mouseover" ) {
              $(this).addClass("product_by_tag_list_over");
            } else {
              $(this).removeClass("product_by_tag_list_over");
            }
          })
          $('.product_by_tag_list_li').live("click", function(){
            product_ids.push(this.id.replace('product_helper_', ''));
            $(this).removeClass("product_by_tag_list_li product_by_tag_list_over");
            $(this).addClass("already_added");
            $.ajax({url:'/admin/ideas/add_product?product_id='+this.id.replace('product_helper_', '')+'&id=#{@idea.id}', success: function(html) {$('#idea_products').append(html);$('#idea_products').find('.spinner').remove();}, beforeSend: function(){$('#idea_products').append('#{escape_javascript loader_bar}')}});
          })
  .contentwrap_large.last
    .field
      = f.label :keywords, "Meta Tag Keywords", :class => "autosize"
      %br
      = f.text_area :keywords, :rows => 5, :cols => 55
  
  %hr
  .actions
    - unless f.object.new_record?
      .force_touch
        = f.check_box :force_touch
        = f.label :force_touch, "Touch Record"
        %p.formhelp Check this box to force expire the cache for this record.
      .clear
    = f.submit :class => 'wymupdate jqui_save'

  :javascript
    $(function() {
      $('#idea_distribution_life_cycle_#{current_system}').autocomplete({source: ["New", "Featured"]});
    });
    $('.overrideable').CreateBubblePopup({
      position: 'top',
      align: 'center',
      distance: '50px',
      tail: {
        align: 'middle',
        hidden: false
      },
      selectable: true,
      innerHtml: 'this property may be overwritten for #{system_name}',
      innerHtmlStyle: {
        color: '#333333',
        'text-align': 'center'
      },
      themeName: 'azure',
      themePath: '/images/ui-plugins/bubblepopup'
    });
    $('.tip_related-products').CreateBubblePopup({
      position: 'top',
      align: 'center',
      distance: '50px',
      tail: {
        align: 'middle',
        hidden: false
      },
      selectable: true,
      innerHtml: 'All products specified here will list this idea as a Related Idea.',
      innerHtmlStyle: {
        color: '#333333',
        'text-align': 'center',
        width: '125px'
      },
      themeName: 'azure',
      themePath: '/images/ui-plugins/bubblepopup'
    });