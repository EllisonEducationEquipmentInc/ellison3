= form_for([:admin, @coupon], :html => {:multipart => true}) do |f|
  = f.error_messages

  %hr
  %h3.contentwrap_XXXL.last System Visibility
  .contentwrap_large
    .field
      = f.label :active, "This coupon is", :class => "autosize"
      active
      = f.radio_button(:active, true)
      disabled
      = f.radio_button(:active, false)
    #enabled_for.field
      = required_label f, :systems_enabled, { :label => "Enabled for", :label_size => "auto" }
      = system_enabled('coupon')
  .contentwrap_large.last
    .field
      = f.label "start_date_#{current_system}", "<span class='required'><span class='icon_datefield'>Start Date #{current_system.upcase}</span></span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 130px'
      = f.text_field "start_date_#{current_system}", :class => 'datetimepicker'
    .field
      = f.label "end_date_#{current_system}", "<span class='required'><span class='icon_datefield'>End Date #{current_system.upcase}</span></span>".html_safe, :class => 'overrideable ui-corner-all', :style => 'width: 130px'
      = f.text_field "end_date_#{current_system}", :class => 'datetimepicker'
      
  %hr
  %h3.contentwrap_XXXL.last Basic Information
  .contentwrap_large
    .field
      = required_label f, :name, { :label => "Coupon Title", :label_size => "110px"}
      = f.text_field :name, :size => 46
    .field
      = required_label f, :level, { :label => "Discount Level", :label_size => "110px"}
      = f.select :level, Coupon::LEVELS.map {|e| [e.humanize, e]}, {}, :onchange => "update_coupon_level()"
    .field.shipping_level.level_specific
      = f.label :no_code_required, "Is a Coupon Code required?", :class => "autosize"
      yes
      = f.radio_button(:no_code_required, false, :onclick => "if (this.checked) {$('label[for=coupon_codes] span').addClass('required');}")
      no
      = f.radio_button(:no_code_required, true, :onclick => "if (this.checked) {$('label[for=coupon_codes] span').removeClass('required');}")
    .field
      = required_label f, :codes, { :label => "Coupon Code(s)", :label_size => "auto" }
      %p.formhelp (Only alpha numeric characters and dashes allowed.)
      = f.text_area :codes, :rows => 2, :cols => 57, :value => @coupon.codes.try(:join, ", ")
      %p.formhelp To create aliases, add additional coupon codes here, separated with commas
    .field
      = f.label :description, :class => 'overrideable'
      %br
      = f.text_area :description, :rows => 6, :cols => 57
  .contentwrap_large.last
    .field
      = f.label :long_description, "Detailed Description <span class='formhelp'>Any text entered here will be displayed in a popup.</span>".html_safe, :class => "autosize"
      %br
      = f.text_area :long_description, :rows => 10, :cols => 57, :class => 'wymeditor'
      
  %hr
  %h3.contentwrap_XXXL.last Coupon Details
  .contentwrap_large
    .field.not_group.left{:style => "margin-right: 10px"}
      = required_label f, :discount_type, { :label => "Discount Type", :label_size => "auto"}
      = f.select :discount_type, Coupon::DISCOUNT_TYPES.map {|e| [e.humanize, e]}
    .field.not_group.left
      = required_label f, :discount_value, { :label => "Discount Value", :label_size => "auto"}
      = f.text_field :discount_value, :size => 6
  .contentwrap_large.last
    .field.product_level.order_level.highest_priced_product_level.level_specific
      = f.label :free_shipping, "Do you want to add free shipping to this offer?", :class => "autosize"
      yes
      = f.radio_button(:free_shipping, true, :onclick => "toggle_shpping_conditions();")
      no
      = f.radio_button(:free_shipping, false, :onclick => "toggle_shpping_conditions();")

  .contentwrap_XXXL.last
    %hr.product_level.level_specific
    = products_helper_tag('coupon[product_item_nums]', @coupon.product_item_nums, :label => "List the Products to be discounted below:", :class => "product_level level_specific")
    .field.group_level.level_specific
      %strong Select coupons to include in this Group Coupon
      %em== (Only coupons enabled for <strong>#{system_name}</strong> are shown below)
      %br
      - Coupon.active.product_or_shipping.cache.each do |coupon|
        -# display only coupons enabled for current system
        - if coupon.systems_enabled.any? {|u| u == current_system}
          = check_box_tag "coupon[child_ids][]", coupon.id, @coupon.child_ids.include?(coupon.id.to_s)
          = link_to coupon.name, edit_admin_coupon_path(coupon)
          == [ <span class='minilink'><strong>#{coupon.codes * ', '}</strong></span> ]
          %br
    %hr.shipping_level.level_specific
    .field.shipping_level.level_specific
      .contentwrap_large
        = required_label f, :shipping_countries, { :label => "Shipping Countries", :label_size => "auto"}
        = check_box_tag :check_all_shipping_countries, "1", false, :onchange => "$('.coupon_shipping_countries').attr('checked', this.checked)"
        %span.minilink Select All
        .admin_checkboxes.ui-corner-all
          - Country.all.cache.order_by(:display_order.asc, :name.asc).each do |country|
            = check_box_tag "coupon[shipping_countries][]", country.name, @coupon.shipping_countries && @coupon.shipping_countries.include?(country.name), :class => "coupon_shipping_countries"
            = country.name
            %br      
      .contentwrap_large.last      
        = f.label(:shipping_states, "Shipping States (if US)", :class => "autosize")
        = check_box_tag :check_all_shipping_states, "1", false, :onchange => "$('.coupon_shipping_states').attr('checked', this.checked)"
        %span.minilink Select All
        .admin_checkboxes.ui-corner-all
          - states.each do |state|
            = check_box_tag "coupon[shipping_states][]", state[1], @coupon.shipping_states && @coupon.shipping_states.include?(state[1]), :class => "coupon_shipping_states"
            = state[0]
            %br
      .clear
  %hr
  %h3 Shopping Cart/Order Requirements
  .contentwrap_large
    .field
      = f.label :cart_must_have, "The customer's cart <strong><em>must</em></strong> have...".html_safe, :class => "autosize"
      = link_to_function "add a new requirement", "$('#cart_must_have_list').append('#{escape_javascript render :partial => 'cart_must_have', :locals => {:condition => {:any => []}}}')", :class => "link_add"
      %ul#cart_must_have_list= render :partial => 'cart_must_have', :collection => @coupon.cart_must_have, :as => :condition
    .field
      = f.label :order_has_to_be, "The customer's order <strong><em>must</em></strong> have...".html_safe, :class => "autosize"
      %ul#order_has_to_be_list
        %li.ui-menu-item
          == a total weight <strong>over</strong>
          = text_field_tag "coupon[order_has_to_be][total_weight][over]", @coupon.order_has_to_be.try(:[], "total_weight").try(:[], "over"), :size => 6
          == pounds, and <strong>under</strong>
          = text_field_tag "coupon[order_has_to_be][total_weight][under]", @coupon.order_has_to_be.try(:[], "total_weight").try(:[], "under"), :size => 6
          pounds.
        %li.ui-menu-item
          == a subtotal <strong>over</strong>
          %span{:class => "icon_pricefield_#{current_currency}"}
            = text_field_tag "coupon[order_has_to_be][sub_total][over]", @coupon.order_has_to_be.try(:[], "sub_total").try(:[], "over"), :size => 6
          == , and <strong>under</strong>"
          %span{:class => "icon_pricefield_#{current_currency}"}
            = text_field_tag "coupon[order_has_to_be][sub_total][under]", @coupon.order_has_to_be.try(:[], "sub_total").try(:[], "under"), :size => 6
          == .
  .contentwrap_large.last
    = products_helper_tag('coupon[product_excluded_item_nums]', @coupon.product_excluded_item_nums, :label => "Exclusion List<br /><span class='formhelp'>Products listed here will be excluded from requirements specified within this section. Further, they will be excluded from order level and highest priced product discounts.</span>".html_safe)
  %br
  .clear
  %hr
  .actions
    = f.submit :class => 'wymupdate jqui_save'
  :javascript
    $(document).ready(function() {
      var validator = $(".new_coupon, .edit_coupon").validate({
        errorClass: "invalid",
        rules: {
          "coupon[systems_enabled][]": {
            required: true,
            minlength: 1
          },
          "coupon[start_date_szus]": {
            required: true
          },
          "coupon[end_date_szus]": {
            required: true
          },
          "coupon[name]": {
            required: true
          },
          "coupon[codes]": {
            required: true
          },
          "coupon[discount_value]": {
            required: true
          }
        },
        messages: {
          "coupon[systems_enabled][]": {
            required: "Please choose at least one system."
          },
          "coupon[start_date_szus]": {
            required: "Please provide a start date."
          },
          "coupon[end_date_szus]": {
            required: "Please provide an end date."
          },
          "coupon[name]": {
            required: "Please provide a coupon title."
          },
          "coupon[codes]": {
            required: "Please specify at least one coupon code."
          },
          "coupon[discount_value]": {
            required: "Please specify a discount value."
          },
          "coupon[shipping_countries][]": {
            required: "Please select at least one country."
          }
        }
      });
    });

    function update_coupon_level(){
      $('.level_specific').hide();
      $('.'+$('#coupon_level').attr('value')+'_level').show();
      if ($('#coupon_level').attr('value') != 'shipping') {
        $('#coupon_no_code_required_false').attr('checked', true);
      } else {
        if ($('#coupon_no_code_required_false').attr('checked')) {
          $('label[for=coupon_codes] span').addClass('required');        
        } else {
          $('label[for=coupon_codes] span').removeClass('required');        
        }
      }
      if ($('#coupon_level').attr('value') == 'group') { $('.not_group').hide(); } else { $('.not_group').show(); }
      toggle_shpping_conditions();
      switch ($('#coupon_level').attr('value')) {
        case 'order':
          $('#coupon_discount_type').val('percent');
          break;
      }
    }
    function toggle_shpping_conditions(){
      if (($('#coupon_free_shipping_true').attr('checked')) || ($('#coupon_level').attr('value') == 'shipping')) {
        $('.shipping_level').show();
        $('#coupon_shipping_countries_').rules('add', {required: true});
      } else {
        $('.shipping_level').hide();
        $('#coupon_shipping_countries_').rules('remove');
      }
    }
    $(function() {
      update_coupon_level();
      toggle_shpping_conditions();
    });
    initialize_buttons();