= form_for([:admin, @coupon], :html => {:multipart => true}) do |f|
  = f.error_messages

  %hr
  %h3.contentwrap_XXXL.last System Visibility
  .contentwrap_large
    .field
      = f.label :active, "This coupon is", :class => "autosize"
      active
      = f.radio_button(:active, true)
      disabled
      = f.radio_button(:active, false)
    .field
      = required_label f, :systems_enabled, { :label => "Enabled for", :label_size => "auto" }
      = system_enabled('coupon')
  .contentwrap_large.last
    .field
      = f.label "start_date_#{current_system}", "Start Date #{current_system.upcase}", :class => 'overrideable'
      = f.text_field "start_date_#{current_system}", :class => 'datetimepicker'
    .field
      = f.label "end_date_#{current_system}", "End Date #{current_system.upcase}", :class => 'overrideable'
      = f.text_field "end_date_#{current_system}", :class => 'datetimepicker'
      
  %hr
  %h3.contentwrap_XXXL.last Basic Information
  .contentwrap_large
    .field
      = required_label f, :name, { :label => "Coupon Title", :label_size => "110px"}
      = f.text_field :name, :size => 46
    .field
      = required_label f, :level, { :label => "Discount Level", :label_size => "110px"}
      = f.select :level, Coupon::LEVELS.map {|e| [e.humanize, e]}, {}, :onchange => "update_coupon_level()"

  .contentwrap_large.last
    .field
      = required_label f, :codes, { :label => "Coupon Code(s)", :label_size => "110px"}
      = f.text_area :codes, :rows => 3, :cols => 40, :value => @coupon.codes.try(:join, ", ")
      %p.formhelp{:style => "margin-left: 122px"} To create aliases, add additional coupon codes here, separated with commas
      
  %hr
  %h3.contentwrap_XXXL.last Coupon Details


  .clear

  .field.shipping_level.level_specific
    = f.label :no_code_required
    %br
    = f.check_box :no_code_required
  .field.not_group
    = required_field f.label(:discount_type)
    %br
    = f.select :discount_type, Coupon::DISCOUNT_TYPES.map {|e| [e.humanize, e]}
  .field.not_group
    = required_field f.label(:discount_value)
    %br
    = f.text_field :discount_value
  .field.group_level.level_specific
    %strong Child Coupons
    %br
    - Coupon.active.product_level.cache.each do |coupon|
      = check_box_tag "coupon[child_ids][]", coupon.id, @coupon.child_ids.include?(coupon.id.to_s)
      = link_to coupon.name, edit_admin_coupon_path(coupon)
      == (#{coupon.codes * ', '})
      %br
  .field.product_level.order_level.highest_priced_product_level.level_specific
    = f.label :free_shipping, "Free Shipping (check if you want to combine this offer with free shipping)"
    %br
    = f.check_box :free_shipping, :onchange => "toggle_shpping_conditions();"
  = products_helper_tag('coupon[product_item_nums]', @coupon.product_item_nums, :label => "Products to discount (item nums):", :class => "product_level level_specific")
  .field.shipping_level.level_specific
    .right
      = f.label(:shipping_states, "Shipping States (if US)")
      = check_box_tag :check_all_shipping_states, "1", false, :onchange => "$('.coupon_shipping_states').attr('checked', this.checked)"
      All
      .admin_checkboxes
        - states.each do |state|
          = check_box_tag "coupon[shipping_states][]", state[1], @coupon.shipping_states && @coupon.shipping_states.include?(state[1]), :class => "coupon_shipping_states"
          = state[0]
          %br
    = required_field f.label(:shipping_countries)
    = check_box_tag :check_all_shipping_countries, "1", false, :onchange => "$('.coupon_shipping_countries').attr('checked', this.checked)"
    All
    .admin_checkboxes
      - Country.all.cache.each do |country|
        = check_box_tag "coupon[shipping_countries][]", country.name, @coupon.shipping_countries && @coupon.shipping_countries.include?(country.name), :class => "coupon_shipping_countries"
        = country.name
        %br
    %br
  %h3 Conditions
  .field
    = f.label :cart_must_have
    = link_to_function "add", "$('#cart_must_have_list').append('#{escape_javascript render :partial => 'cart_must_have', :locals => {:condition => {:any => []}}}')"
    %ul#cart_must_have_list= render :partial => 'cart_must_have', :collection => @coupon.cart_must_have, :as => :condition
  .field
    = f.label :order_has_to_be
    %ul#order_has_to_be_list
      %li.ui-menu-item
        %strong Total weight:
        Over
        = text_field_tag "coupon[order_has_to_be][total_weight][over]", @coupon.order_has_to_be.try(:[], "total_weight").try(:[], "over")
        Under
        = text_field_tag "coupon[order_has_to_be][total_weight][under]", @coupon.order_has_to_be.try(:[], "total_weight").try(:[], "under")
      %li.ui-menu-item
        %strong Sub Total:
        Over
        = text_field_tag "coupon[order_has_to_be][sub_total][over]", @coupon.order_has_to_be.try(:[], "sub_total").try(:[], "over")
        Under
        = text_field_tag "coupon[order_has_to_be][sub_total][under]", @coupon.order_has_to_be.try(:[], "sub_total").try(:[], "under")
  = products_helper_tag('coupon[product_excluded_item_nums]', @coupon.product_excluded_item_nums, :label => "Products excluded from 'Order has to be' calculations above. (Also, these products will be excluded from order level and highest priced product discounts)")
  .field
    = f.label :description, :class => 'overrideable'
    %br
    = f.text_area :description, :class => 'wymeditor'
  %br
  .clear
  .actions
    = f.submit :class => 'wymupdate jqui_save'
  :javascript
    function update_coupon_level(){
      $('.level_specific').hide();
      $('.'+$('#coupon_level').attr('value')+'_level').show();
      if ($('#coupon_level').attr('value') != 'shipping') $('#coupon_no_code_required').attr('checked', false);
      if ($('#coupon_level').attr('value') == 'group') { $('.not_group').hide(); } else { $('.not_group').show(); }
      switch ($('#coupon_level').attr('value')) {
        case 'order':
          $('#coupon_discount_type').val('percent');
          break;
      }
    }
    function toggle_shpping_conditions(){
      if ($('#coupon_free_shipping').attr('checked')) {
        $('.shipping_level').show();
      } else if ($('#coupon_level').attr('value') != 'shipping'){
        $('.shipping_level').hide();
      }
    }
    $(function() {
      update_coupon_level();
      toggle_shpping_conditions();
    });
    initialize_buttons();