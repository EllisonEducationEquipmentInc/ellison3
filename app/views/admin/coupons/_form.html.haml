= form_for([:admin, @coupon], :html => {:multipart => true}) do |f|
  = f.error_messages

  %hr
  %h3.contentwrap_XXXL.last System Visibility
  .contentwrap_large
    .field
      = f.label :active, "This coupon is", :class => "autosize"
      active
      = f.radio_button(:active, true)
      disabled
      = f.radio_button(:active, false)
    .field
      = required_label f, :systems_enabled, { :label => "Enabled for", :label_size => "auto" }
      = system_enabled('coupon')
  .contentwrap_large.last
    .field
      = f.label "start_date_#{current_system}", "Start Date #{current_system.upcase}", :class => 'overrideable'
      = f.text_field "start_date_#{current_system}", :class => 'datetimepicker'
    .field
      = f.label "end_date_#{current_system}", "End Date #{current_system.upcase}", :class => 'overrideable'
      = f.text_field "end_date_#{current_system}", :class => 'datetimepicker'
      
  %hr
  %h3.contentwrap_XXXL.last Basic Information
  .contentwrap_large
    .field
      = required_label f, :name, { :label => "Coupon Title", :label_size => "110px"}
      = f.text_field :name, :size => 46
    .field
      = required_label f, :level, { :label => "Discount Level", :label_size => "110px"}
      = f.select :level, Coupon::LEVELS.map {|e| [e.humanize, e]}, {}, :onchange => "update_coupon_level()"
    .field.shipping_level.level_specific
      = f.label :no_code_required, "Is a Coupon Code required?", :class => "autosize"
      yes
      = f.radio_button(:no_code_required, true)
      no
      = f.radio_button(:no_code_required, true)

  .contentwrap_large.last
    .field
      = required_label f, :codes, { :label => "Coupon Code(s)", :label_size => "110px"}
      = f.text_area :codes, :rows => 3, :cols => 40, :value => @coupon.codes.try(:join, ", ")
      %p.formhelp{:style => "margin-left: 122px"} To create aliases, add additional coupon codes here, separated with commas
      
  %hr
  %h3.contentwrap_XXXL.last Coupon Details
  .contentwrap_large
    .field.not_group.left{:style => "margin-right: 10px"}
      = required_label f, :discount_type, { :label => "Discount Type", :label_size => "auto"}
      = f.select :discount_type, Coupon::DISCOUNT_TYPES.map {|e| [e.humanize, e]}
    .field.not_group.left
      = required_label f, :discount_value, { :label => "Discount Value", :label_size => "auto"}
      = f.text_field :discount_value, :size => 6
  .contentwrap_large.last
    .field.product_level.order_level.highest_priced_product_level.level_specific
      = f.label :free_shipping, "Do you want to add free shipping to this offer?", :class => "autosize"
      yes
      = f.radio_button(:free_shipping, true, :onclick => "toggle_shpping_conditions();")
      no
      = f.radio_button(:free_shipping, false, :onclick => "toggle_shpping_conditions();")

  .contentwrap_XXXL.last
    %hr.product_level.level_specific
    = products_helper_tag('coupon[product_item_nums]', @coupon.product_item_nums, :label => "List the Products to be discounted below:", :class => "product_level level_specific")
    .field.group_level.level_specific
      %strong Child Coupons
      %br
      - Coupon.active.product_level.cache.each do |coupon|
        = check_box_tag "coupon[child_ids][]", coupon.id, @coupon.child_ids.include?(coupon.id.to_s)
        = link_to coupon.name, edit_admin_coupon_path(coupon)
        == (#{coupon.codes * ', '})
        %br
    %hr.shipping_level.level_specific
    .field.shipping_level.level_specific
      .contentwrap_large
        = required_label f, :shipping_countries, { :label => "Shipping Countries", :label_size => "auto"}
        = check_box_tag :check_all_shipping_countries, "1", false, :onchange => "$('.coupon_shipping_countries').attr('checked', this.checked)"
        %span.minilink Select All
        .admin_checkboxes.ui-corner-all
          - Country.all.cache.each do |country|
            = check_box_tag "coupon[shipping_countries][]", country.name, @coupon.shipping_countries && @coupon.shipping_countries.include?(country.name), :class => "coupon_shipping_countries"
            = country.name
            %br      
      .contentwrap_large.last      
        = f.label(:shipping_states, "Shipping States (if US)", :class => "autosize")
        = check_box_tag :check_all_shipping_states, "1", false, :onchange => "$('.coupon_shipping_states').attr('checked', this.checked)"
        %span.minilink Select All
        .admin_checkboxes.ui-corner-all
          - states.each do |state|
            = check_box_tag "coupon[shipping_states][]", state[1], @coupon.shipping_states && @coupon.shipping_states.include?(state[1]), :class => "coupon_shipping_states"
            = state[0]
            %br
      .clear
  %hr
  %h3 Shopping Cart/Order Requirements
  .contentwrap_large
    .field
      = f.label :cart_must_have
      = link_to_function "add", "$('#cart_must_have_list').append('#{escape_javascript render :partial => 'cart_must_have', :locals => {:condition => {:any => []}}}')"
      %ul#cart_must_have_list= render :partial => 'cart_must_have', :collection => @coupon.cart_must_have, :as => :condition
    .field
      = f.label :order_has_to_be
      %ul#order_has_to_be_list
        %li.ui-menu-item
          %strong Total weight:
          Over
          = text_field_tag "coupon[order_has_to_be][total_weight][over]", @coupon.order_has_to_be.try(:[], "total_weight").try(:[], "over")
          Under
          = text_field_tag "coupon[order_has_to_be][total_weight][under]", @coupon.order_has_to_be.try(:[], "total_weight").try(:[], "under")
        %li.ui-menu-item
          %strong Sub Total:
          Over
          = text_field_tag "coupon[order_has_to_be][sub_total][over]", @coupon.order_has_to_be.try(:[], "sub_total").try(:[], "over")
          Under
          = text_field_tag "coupon[order_has_to_be][sub_total][under]", @coupon.order_has_to_be.try(:[], "sub_total").try(:[], "under")
  .contentwrap_large.last
    = products_helper_tag('coupon[product_excluded_item_nums]', @coupon.product_excluded_item_nums, :label => "Products excluded from 'Order has to be' calculations above. (Also, these products will be excluded from order level and highest priced product discounts)")
  %hr
  .field
    = f.label :description, :class => 'overrideable'
    %br
    = f.text_area :description, :class => 'wymeditor'
  %br
  .clear
  .actions
    = f.submit :class => 'wymupdate jqui_save'
  :javascript
    function update_coupon_level(){
      $('.level_specific').hide();
      $('.'+$('#coupon_level').attr('value')+'_level').show();
      if ($('#coupon_level').attr('value') != 'shipping') $('#coupon_no_code_required').attr('checked', false);
      if ($('#coupon_level').attr('value') == 'group') { $('.not_group').hide(); } else { $('.not_group').show(); }
      switch ($('#coupon_level').attr('value')) {
        case 'order':
          $('#coupon_discount_type').val('percent');
          break;
      }
    }
    function toggle_shpping_conditions(){
      if ($('#coupon_free_shipping_true').attr('checked')) {
        $('.shipping_level').show();
      } else if ($('#coupon_level').attr('value') != 'shipping'){
        $('.shipping_level').hide();
      }
    }
    $(function() {
      update_coupon_level();
      toggle_shpping_conditions();
    });
    initialize_buttons();